import time, csv, numpy, re, matplotlib.pyplot as pl 
ListOfTimes = []
userinput = []
first_row = []
arg3int = []
arg2int = []
arg1int = []
arg1 = []
arg2 = []
arg3 = [] 
firstvar = ""
secondvar = ""
thirdvar = ""
fourthvar = ""
plotagainst = ""
"""this code doesnt work if i run it first to read a file and then try to write smt to that file, 
because the program pointer is at the end; can be augmented of course"""
def LastLines(list,n):
    ListLast = list[-n:]
    return ListLast

def tail(fileobj,csvreaderArg): #defines a generator function for a file object and reader object
        fileobj.seek(0,0) 
        StartTime = time.time()
        count = 0
        while not fileobj.closed:
            #line = iterator1.next()
            #line = csvreaderArg.next()# this will pas a line to a generator
            line = fileobj.readline()
            if not line:
                time.sleep(0.03)
                TimeToBreak2 = time.time()
                if TimeToBreak2 - TimeToBreak1 < 3: 
                    #this keeps track of how long a document hasnt been updated 
                    # i.e. how long a line hasnt been added
                    continue
                elif 3 <= TimeToBreak2 - TimeToBreak1<=6: #if wait for 3-6 sec more than 10 times - break
                    count+=1
                    if count<10:
                        continue
                    else:
                        break
                else: #if wait more than 6 sec break because prob run out of lines in a file
                    break
            else:
                TimePassed = time.time()
                TimeStep = abs(StartTime - TimePassed)
                #this tracks how long it takes to read another line
                ListOfTimes.append(TimeStep)
                yield line
                TimeToBreak1 = StartTime = time.time()
            AverageTime = numpy.mean(ListOfTimes)
            if AverageTime *10000 > 43200: # 12*60*60 seconds in 12 hrs; 10k cycles; crude calculation
                break 
            if numpy.mean(LastLines(ListOfTimes,20)) > 2:
                break # break if the last 20 time intervals are longer than 2 sec
            
def ProcessingLines(generator): # generates lists of strings containing fields
            for line in generator:
                line1 = re.sub(r' ', ",", line)
                line2 = re.sub(r',,', "", line1)
                LineList = line2.split(",")
                yield LineList              
                
if __name__ == "__main__":
    with open('/Users/nikita.zabolotniy/Desktop/CSVtoWrite.txt', 'r') as csvfile3:
        csvfile3.seek(0,0) 
        csvreader = csv.reader(csvfile3, skipinitialspace=True,delimiter=" ") #reader object
        # to represent lines as lists of fields
        generator1 = tail(csvfile3,csvreader) #generator returns strings
        for row in csvreader:
            first_row = row
            break
        print first_row 
        InitTime = time.time()
        # i use file object methods here to process lines rather than reader object methods
        #but theyre equivalent for simple things as i understand 
        generator2 = ProcessingLines(generator1)
        
        for row in generator2:
            arg1.append(row[1])  # extracts the first(Cycle)component of each row 
            #represented as a list
            arg2.append(row[3])
            #arg3.append(row[secondvarInd])
        arg1 = arg1[1:]
        arg2 = arg2[1:]
        #arg3 = arg3[1:]
        print arg1
        print arg2
        for i in range(0,len(arg2)):
            #arg3int.append(int(float(arg3[i])))
            arg2int.append(int(float(arg2[i])))
            arg1int.append(int(float(arg1[i])))
        print arg1int
        print arg2int
        
        print "================================="  
        maximum1 = max(ListOfTimes)
        """for some reason the greatest value for time interval is for the last line"""
        ListOfTimes.pop(len(ListOfTimes)-1)
        maximum2 = max(ListOfTimes)
        print ListOfTimes
        print maximum
        #TBD modify list such that it takes the max of all elements except the last one
             
            
        for line in generator2: #can only iterate once; if the generator is terminated, 
            #this loop is not executed, otherwise it seems to be in an idle state
            print line
        #print "after second for"
        
        """#TBD WRITE FUNCTION WHICH DUNAMICALLY ADJUSTS to the number of inputs
        numofvar = int(raw_input("how many variables would you like to plot?"))
        for i in range(numofvar+1):
            if i == 0:
                plotagainst = raw_input("what variable would you like to plot against?")
            elif i == 1:
                firstvar = raw_input("enter the name of the first variable for plotting")
            elif i == 2:
                secondvar = raw_input("enter the name if the second variable")
            elif i == 3:
                thirdvar = raw_input("enter the name if the third variable")
            elif i == 4:
                fourthvar = raw_input("enter the name if the fourth variable")

        plotagainstInd = first_row.index(plotagainst) #we now know the index if the desired value in the first_row
        firstvarInd = first_row.index(firstvar) #indices of all the other variables to plot
        secondvarInd = first_row.index(secondvar)
        thirdvarInd = first_row.index(thirdvar)
        fourthvarInd = first_row.index(fourthvar)"""
        
           
    
